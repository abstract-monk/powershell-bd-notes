
Introduction to Poweshell
Braindump Outline Notes
12/21/2018 

1. What is powershell
 - object oriented scripting language

2. Powershell History, Current Versions, Future 
 - command.exe, cmd.exe, cscript, vbscript
 - unix tools for windows
 - powershell version 1 - 5
 - powershell core (version 6.x)
 - azure and and linux on windows
 - powershell is built on .NET framework
 - what is .NET
 
3. What is Powershell used for
 - sysadmin
 - cloud infrastructure
 - pentesting
 - ci/cd automation
 - configuration management
 - container management 
 - database administration
 - scripting and tool making
 
4. Getting Started
 - which version am i using, $PSVersiontable
 - Windows is not case sensitive
 - Windows allows spaces in filenames
 - what's up with all these powershells on my computer
   * powershell 64 bit, powershell 32 bit, powershell ise
 - powershell core
 - installing powershell, uninstalling powershell
 - console properties
 - problems from horizontal scroll
 - problems from accidental pausing of console
 - tab completion
 - administrator vs non-admin shells
 - third party scripting environments
 
5. Diving in to cmdlets and how to Get-Help
 - the help system is update-able
 - commands, cmdlets, functions, etc
 - cmdlet Get-Help, help and man 
   * help is a function wrapper
   * man is an alias for help
 - help topics for most cmdlets and their parameters
 - also topics for background concepts and general info
 - using wildcards to find help topics
 - parameter sets and common parameters
 - optional and mandatory parameters
 - postional parameters
 - full help
 - parameter values
 - command examples
 - about topics (common parameters)

6. Running Commands
 - anatomy of a command
  * paramter name, value
  * wildcards, lists, switches
 - terminology
   * cmdlet - native powershell utility
   * function - written in native powershell instead of .NET
   * workflow - special kind of function that ties into PS Workflow Execution System
   * application - any kind of external executable
   * generic term that refers to all of the above
 - cmdlet naming convention uses Verb-Noun structure
 - aliases: nicknames for commands
   * get-alias example
 - truncating parameter names
 - parameter name aliases
 - positional parameters
 - show-command example
 - external command support
 - dealing with errors 
 
7. Working with Providers
 - what are providers
   * adapters that allow connections to different types of data stores
 - capabilities
   * ShouldProcess - support for parameters that allow you to test before committing
   * Filter - supports Filter paramter to manipulate content from providers
   * Credentials - permits specification of alternative credentials
   * Transactions - supports series of changes that can be committed or rolledback as single unit
 - file system organization
   * drives, folders, files
   * powershell uses generic terms such as "item"
 - how the file system is like other data stores
   * windows registry
   * powershell connects to drives, exposing items and item properties
 - navigating the file system
 - using wildcards and literal paths
   * not all providers allow for wilcards
 - working with other providers
   * another registry example

8. Connecting Commands with the Pipeline
 - what is the pipeline
   * a way to chain the output of a command to the input of another command 
 - some commands already use the pipeline in the background
   * dir, help
 - exporting to csv or xml
 - comparing files, using in parentheses to order operations
 - directing output to file or printer
   * out-file, out-printer, out-default
 - converting to html
 - using cmdlets to modify the system
 - get-content vs. import-csv and import-clixml

9. Adding Commands
 - modules vs snapins
  * get-pssnapin
  * get-command -pssnapin $snapin_name
  * get-content env:psmodulepath
  * get-module
 - profiles scripts, preloading
 
10. Objects are data
 - what are objects? 
   * objects, properties, methods, collection
   * a collection of objects can be thought of as an in-memory table of information
   * rows are objects, and columns are attibutes
 - powershell uses objects to represent data
   * because windows is an object oriented system
   * objects removes the overhead of text-manipulation
 - discover objects with get-member
 - TypeName and Powershell namespace
 - properties always contain a value
   * many properties are read-only
 - methods are actions you can direct on an object
 - objects can also have Events which notify of a change in state
 - sorting objects with Sort-Object
 - selecting the properties you want with Select-Object 
  * select-object vs where-object
 
